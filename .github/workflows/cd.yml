name: CD Pipeline

on:
  push:
    branches: [main]
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the release'
        required: false
        default: 'manual-build'

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version and determine deployment
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION_NAME="${{ github.ref_name }}"
            VERSION_NAME="${VERSION_NAME#v}"  # Remove 'v' prefix
            DEPLOY_TARGET="closed"
            IS_TAG_BUILD="true"
            echo "Tag build detected: $VERSION_NAME -> closed testing"
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            VERSION_NAME="main-${{ github.run_number }}"
            DEPLOY_TARGET="internal"
            IS_TAG_BUILD="false"
            echo "Main branch build: $VERSION_NAME -> internal testing"
          else
            VERSION_NAME="${{ github.event.inputs.version_name || 'manual-build' }}"
            DEPLOY_TARGET="internal"
            IS_TAG_BUILD="false"
            echo "Manual build: $VERSION_NAME -> internal testing"
          fi
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "deploy_target=$DEPLOY_TARGET" >> $GITHUB_OUTPUT
          echo "is_tag_build=$IS_TAG_BUILD" >> $GITHUB_OUTPUT

      - name: Set Version
        uses: chkfung/android-version-actions@v1.2.1
        with:
          gradlePath: app/build.gradle.kts
          versionCode: ${{ github.run_number }}
          versionName: ${{ steps.version.outputs.version_name }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build prod release APK and AAB
        run: |
          ./gradlew assembleProdRelease bundleProdRelease
        env:
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Prepare release artifacts
        id: artifacts
        run: |
          # Find the generated files (Gradle handles the naming)
          APK_PATH=$(find app/build/outputs/apk/prod/release -name "*.apk" | head -1)
          AAB_PATH=$(find app/build/outputs/bundle/prodRelease -name "*.aab" | head -1)
          
          # Extract the actual filenames generated by Gradle
          APK_NAME=$(basename "$APK_PATH")
          AAB_NAME=$(basename "$AAB_PATH")
          
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "aab_path=$AAB_PATH" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coffee-shot-timer-${{ steps.version.outputs.version_name }}
          path: |
            ${{ steps.artifacts.outputs.apk_path }}
            ${{ steps.artifacts.outputs.aab_path }}

      - name: Create or update GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_NAME="${{ steps.version.outputs.version_name }}"
          IS_TAG_BUILD="${{ steps.version.outputs.is_tag_build }}"
          APK_PATH="${{ steps.artifacts.outputs.apk_path }}"
          AAB_PATH="${{ steps.artifacts.outputs.aab_path }}"
          
          if [[ "$IS_TAG_BUILD" == "true" ]]; then
            # Tag build - create new release
            TAG_NAME="v${VERSION_NAME}"
            RELEASE_TITLE="Coffee Shot Timer v${VERSION_NAME}"
            
            gh release create "$TAG_NAME" \
              --title "$RELEASE_TITLE" \
              --generate-notes \
              "$APK_PATH" \
              "$AAB_PATH"
              
            echo "Created release: $RELEASE_TITLE"
          else
            # Main branch build - replace existing main release
            RELEASE_TAG="main-latest"
            RELEASE_TITLE="Coffee Shot Timer (Latest Main)"
            
            # Delete existing release if it exists
            if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
              gh release delete "$RELEASE_TAG" --yes
              echo "Deleted existing main release"
            fi
            
            # Create new release
            gh release create "$RELEASE_TAG" \
              --title "$RELEASE_TITLE" \
              --notes "Latest build from main branch (build #${{ github.run_number }})" \
              --prerelease \
              "$APK_PATH" \
              "$AAB_PATH"
              
            echo "Created/updated main release: $RELEASE_TITLE"
          fi

      - name: Deploy to Google Play Console
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.jodli.coffeeshottimer
          releaseFiles: ${{ steps.artifacts.outputs.aab_path }}
          track: ${{ steps.version.outputs.deploy_target }}
          status: completed
          inAppUpdatePriority: 2